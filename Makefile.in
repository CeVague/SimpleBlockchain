##########################################################################
#                                                                        #
#     The Alt-ergo theorem prover                                        #
#     Copyright (C) 2006-2010                                            #
#                                                                        #
#     Sylvain Conchon                                                    #
#     Evelyne Contejean                                                  #
#     Stephane Lescuyer                                                  #
#     Mohamed Iguernelala                                                #
#     Alain Mebsout                                                      #
#                                                                        #
#     CNRS - INRIA - Universite Paris Sud                                #
#                                                                        #
#   This file is distributed under the terms of the CeCILL-C licence     #
#                                                                        #
##########################################################################

# sample Makefile for Objective Caml
# Copyright (C) 2001 Jean-Christophe FILLIATRE
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License version 2, as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# See the GNU Library General Public License version 2 for more details
# (enclosed in the file LGPL).

# where to install the binaries
DESTDIR=
prefix=@prefix@
exec_prefix=@exec_prefix@
BINDIR=$(DESTDIR)@bindir@
LIBDIR=$(DESTDIR)@libdir@/alt-ergo

# where to install the man page
MANDIR=$(DESTDIR)@mandir@

# other variables set by ./configure
OCAMLC   = @OCAMLC@
OCAMLOPT = @OCAMLOPT@
OCAMLDEP = @OCAMLDEP@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLLIB = @OCAMLLIB@
OCAMLBEST= @OCAMLBEST@
OCAMLVERSION = @OCAMLVERSION@
OCAMLWEB = @OCAMLWEB@
OCAMLWIN32 = @OCAMLWIN32@
EXE = @EXE@

INCLUDES = -I lib `ocamlfind query -i-format odate`
BFLAGS   = -g -annot -bin-annot $(INCLUDES)
OFLAGS   = -g -annot -bin-annot -O3 -unbox-closures $(INCLUDES)
BIBBYTE  =  str.cma unix.cma odate.cma
BIBOPT   = $(BIBBYTE:.cma=.cmxa)


# main target
#############

NAME = mbc
BYTE = $(NAME).byte
OPT  = $(NAME).opt

all: $(OCAMLBEST) 

# bytecode and native-code compilation
######################################

CMO = util.cmo  \
options.cmo \
lib/error.cmo  \
lib/types.cmo  \
lib/helpers.cmo \
lib/reader.cmo  \
lib/writer.cmo  \
mono_memory.cmo  \
mono_disk.cmo  \
multi.cmo  \
main.cmo

CMX = $(CMO:.cmo=.cmx)

GENERATED =


byte: $(NAME).byte
opt: $(NAME).opt

$(NAME).byte: $(CMO)
	$(if $(QUIET),@echo 'Linking $@' &&) 
	$(OCAMLC) $(BFLAGS) -o $@ $(BIBBYTE)  $^

$(NAME).opt: $(CMX)
	$(if $(QUIET),@echo 'Linking $@' &&) 
	$(OCAMLOPT) $(OFLAGS) -o $@ $(BIBOPT) $^

# literate programming
######################

SOURCES = 

$(NAME).tex: $(SOURCES)
	$(OCAMLWEB) -o $@ $^

# generic rules
###############

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly .tex .dvi .ps .html

.mli.cmi:
	$(if $(QUIET),@echo 'Compiling $@' &&) $(OCAMLC) -c $(BFLAGS)  $<

.ml.cmo:
	$(if $(QUIET),@echo 'Compiling $@' &&) $(OCAMLC) -c $(BFLAGS)  $<

.ml.o:
	$(if $(QUIET),@echo 'Compiling $@' &&) $(OCAMLOPT)  -c $(OFLAGS) $<

.ml.cmx:
	$(if $(QUIET),@echo 'Compiling $@' &&) $(OCAMLOPT)  -c $(OFLAGS) $<

.mll.ml:
	$(if $(QUIET),@echo 'Compiling $<' &&) $(OCAMLLEX) $< > /dev/null

.mly.ml:
	$(if $(QUIET),@echo 'Compiling $<' &&) $(OCAMLYACC) -v $< 

.mly.mli:
	$(if $(QUIET),@echo 'Compiling $<' &&) $(OCAMLYACC) -v $< 

.tex.dvi:
	latex $< && latex $<

.dvi.ps:
	dvips $< -o $@ 

.tex.html:
	hevea $<

# Emacs tags
############

tags:
	find . -name "*.ml*" | sort -r | xargs \
	etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/module[ \t]+\([^ \t]+\)/\1/"

# Makefile is rebuilt whenever Makefile.in or configure.in is modified
######################################################################

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf 

# clean
#######

clean:: 
	@rm -f *.cm[iox] *.o *.annot *.cmt*
	@rm -f lib/*.cm[iox] lib/*.o lib/*.annot lib/*.cmt*
	@rm -f $(GENERATED) *.output
	@rm -f $(NAME).byte $(NAME).opt
	@rm -f *.aux *.log $(NAME).tex $(NAME).dvi $(NAME).ps
	@rm -f *~ \#*
	@rm -f run run.tgz
	@rm -f dep.pdf

dist-clean distclean:: clean
	@rm -f Makefile config.cache config.log config.status

# depend
########

.depend depend:: $(GENERATED)
	@rm -f .depend
	@$(OCAMLDEP) -I lib *.ml *.mli lib/*.ml lib/*.mli > .depend

dep: depend
	cat .depend | ocamldot | dot -Tpdf > dep.pdf

include .depend

lint:
	ocp-lint --disable-plugin-indent --pwarning --perror

edit:
	emacs lib/*.ml* *.ml* &

opam-deps:
	opam install odate merlin ocp-indent user-setup
